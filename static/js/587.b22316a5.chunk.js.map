{"version":3,"file":"static/js/587.b22316a5.chunk.js","mappings":"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","sources":["webpack://formula1/./src/components/common/containers/fieldset/fieldset.module.css?c9aa","components/common/containers/fieldset/Fieldset.js","webpack://formula1/./src/components/common/videoInfo/videoInfo.module.css?080b","components/common/videoInfo/VideoInfo.js","webpack://formula1/./src/components/common/video/video.module.css?a75e","components/common/video/Video.js","webpack://formula1/./src/components/home/videosWrapper/videosWrapper.module.css?9280","webpack://formula1/./src/components/common/videoWrapper/videoWrapper.module.css?a55a","components/common/videoWrapper/VideoWrapper.js","components/home/videosWrapper/VideosWrapper.js","utils/api/heroku_api/hVideos.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"fieldset-full\":\"fieldset_fieldset-full__BGbfc\",\"fieldset-half\":\"fieldset_fieldset-half__gWggl\",\"legend-black\":\"fieldset_legend-black__44C7E\",\"legend-white\":\"fieldset_legend-white__KmXF4\"};","import React from 'react'\r\nimport styles from './fieldset.module.css'\r\n\r\n function Fieldset({size, content, color, children}) {\r\n\r\n    return (\r\n         <fieldset className={styles[`fieldset-${size}`]}>\r\n                <legend className={styles[`legend-${color}`]}>{content}</legend>\r\n                {children}\r\n        </fieldset>\r\n    )\r\n\r\n}\r\n\r\nexport default Fieldset","// extracted by mini-css-extract-plugin\nexport default {\"light-info\":\"videoInfo_light-info__cRs2P\",\"video-par\":\"videoInfo_video-par__BjWXc\",\"content-video-par\":\"videoInfo_content-video-par__3yeE1\"};","import React from 'react'\r\nimport styles from './videoInfo.module.css'\r\nimport {useNavigate, useLocation} from 'react-router-dom'\r\n\r\nfunction VideoInfo(props) {\r\n    let navigate = useNavigate()\r\n    let location = useLocation()\r\n    function clickHandler() {\r\n        navigate(`/videos/${props.id || props._id}`)\r\n        window.scrollTo({\r\n            top: 0,\r\n            behavior: \"smooth\"\r\n        })\r\n    }\r\n    \r\n        \r\n    \r\n    return (\r\n        <div onClick={clickHandler} className={styles['light-info']}>\r\n            <p className={styles['video-par']}>VIDEO</p>\r\n            <p className={styles['content-video-par']}>{props.title}</p>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default VideoInfo;","// extracted by mini-css-extract-plugin\nexport default {\"player\":\"video_player__bkB+F\",\"player-wrapper\":\"video_player-wrapper__urFss\"};","import React from 'react'\r\nimport ReactPlayer from 'react-player/youtube'\r\nimport styles from './video.module.css'\r\nfunction Video(props) {\r\n   \r\n    return (\r\n        <div className={styles['player-wrapper']}>\r\n            <ReactPlayer className={styles.player} width={'100%'} height={'100%'} url={props.url} light={true} controls={true} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Video","// extracted by mini-css-extract-plugin\nexport default {\"video-half\":\"videosWrapper_video-half__AUks+\",\"video-quarter\":\"videosWrapper_video-quarter__vEq9v\"};","// extracted by mini-css-extract-plugin\nexport default {\"video-container\":\"videoWrapper_video-container__i11vH\",\"video-info\":\"videoWrapper_video-info__-zDHt\",\"video-sub\":\"videoWrapper_video-sub__sRUkQ\"};","import React from 'react';\r\nimport VideoInfo from '../videoInfo/VideoInfo';\r\nimport Video from '../video/Video';\r\nimport styles from './videoWrapper.module.css'\r\n\r\n\r\nfunction VideoWrapper(props) {\r\n\r\n    return (\r\n        <div className={styles['video-container']}>\r\n            <div className={styles['video-sub']}>\r\n                <Video url={props.url}/>\r\n            </div>\r\n            <div className={styles['video-info']}>\r\n                <VideoInfo title={props.title} id={props.id || props._id}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoWrapper","import React, {useState, useEffect, Fragment} from 'react'\r\nimport styles from './videosWrapper.module.css'\r\nimport Video from '../../common/video/Video'\r\nimport hVideos from '../../../utils/api/heroku_api/hVideos'\r\nimport ErrorComp from '../../common/errorComp/ErrorComp'\r\nimport Spinner from '../../common/spinner/Spinner'\r\nimport VideoWrapper from '../../common/videoWrapper/VideoWrapper'\r\nimport Fieldset from '../../common/containers/fieldset/Fieldset'\r\n\r\nfunction VideosWrapper() {\r\n    const [videos, setVideos] = useState({error: null, hasError: false, videos: null})\r\n    useEffect(() => {\r\n        async function FetchVideos() {\r\n            try {\r\n                let videosToFetch = 3;\r\n                const response = await hVideos.getVideos(videosToFetch)\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch videos!')\r\n                }\r\n                let json = await response.json()\r\n                if (json.length < videosToFetch) {\r\n                    throw new Error('Invlid video count!')\r\n                }\r\n               \r\n                setVideos({videos: json, hasError: false, error: null})\r\n                return json\r\n            } catch(err) {\r\n                setVideos({...videos, hasError: true, error: err.message})\r\n            }\r\n        }\r\n        FetchVideos()\r\n    },[])\r\n    \r\n    return (\r\n            <Fieldset content={\"EDITOR'S PICK\"} size={'full'} color={'black'}>\r\n                {videos.hasError && videos.error ? <ErrorComp errorMessage={videos.error}/> : null}\r\n                {(!videos.error && !videos.hasError) ? videos.videos ? <Fragment>\r\n                    <div className={styles['video-half']}>\r\n                        <Video url={videos.videos[0].url} id={videos.videos[0]._id}/>\r\n                    </div>\r\n                    <div className={styles['video-quarter']}>\r\n                        <VideoWrapper url={videos.videos[1].url} title={videos.videos[1].title} id={videos.videos[1]._id}/>\r\n                    </div>\r\n                    <div className={styles['video-quarter']}>\r\n                        <VideoWrapper url={videos.videos[2].url} title={videos.videos[2].title} id={videos.videos[2]._id}/>\r\n                    </div> \r\n                </Fragment> : <Spinner/> : null}\r\n            </Fieldset>\r\n    )\r\n}\r\n\r\nexport default VideosWrapper","const heroku_api_url = 'https://boiling-brushlands-51072.herokuapp.com'\r\n\r\nasync function getVideos(count=20) {\r\n    try {\r\n        let response = await fetch(`${heroku_api_url}/videos?count=${count}`, {\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            credentials: 'include'\r\n        })\r\n        return response\r\n    } catch(err) {\r\n        return err\r\n    }\r\n}\r\n\r\nasync function getVideoById(id) {\r\n     try{\r\n        let response = await fetch(`${heroku_api_url}/videos/${id}`, {\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            credentials: 'include'\r\n        })\r\n        \r\n        return response\r\n    } catch(err) {\r\n        return err\r\n    }\r\n}\r\n\r\nexport default {getVideos, getVideoById}"],"names":["size","content","color","children","className","styles","props","navigate","useNavigate","useLocation","onClick","id","_id","window","scrollTo","top","behavior","title","width","height","url","light","controls","Video","VideoInfo","useState","error","hasError","videos","setVideos","useEffect","videosToFetch","hVideos","response","ok","Error","json","length","message","FetchVideos","Fieldset","ErrorComp","errorMessage","Fragment","Spinner","heroku_api_url","getVideos","count","fetch","headers","credentials","getVideoById"],"sourceRoot":""}