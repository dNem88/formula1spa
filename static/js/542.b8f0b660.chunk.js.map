{"version":3,"file":"static/js/542.b8f0b660.chunk.js","mappings":"oNACA,EAAiC,yCAAjC,EAA8F,4CAA9F,EAAgK,8C,8BCAhK,EAA6B,iC,SCgB7B,MAfA,SAAsBA,GAClB,IAAMC,EAASD,EAAMC,OAAOC,MAAM,KAC5BC,EAAYF,EAAO,GACnBG,EAAWH,EAAO,GACxB,OACI,iBAAKI,UAAWC,EAAhB,WACI,uBAAIN,EAAMO,YACV,uBAAIJ,KACJ,uBAAIC,KACJ,uBAAIJ,EAAMQ,QACV,uBAAIR,EAAMS,a,UCiDtB,MApDA,SAA0BT,GACtB,OAAkCU,EAAAA,EAAAA,UAAS,CACvCC,UAAW,KACXC,SAAU,KACVC,aAAc,OAHlB,eAAOF,EAAP,KAAkBG,EAAlB,KA4BA,OAtBAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,+GAE6BC,EAAAA,EAAAA,sBAF7B,WAEYC,EAFZ,QAGsBC,GAHtB,sBAIkB,IAAIC,MAAM,4BAJ5B,uBAMyBF,EAASG,OANlC,YAMYA,EANZ,QAOiBC,MAPjB,uBAQkB,IAAIF,MAAMC,EAAKC,MAAMC,SARvC,eAUQR,EAAa,CAACH,UAAWS,EAAMR,SAAU,KAAMC,aAAc,OAVrE,kBAWeO,GAXf,yCAaQN,EAAa,CAACH,UAAW,KAAMC,UAAU,EAAMC,aAAc,KAAIS,UAbzE,mFADY,uBAAC,WAAD,wBAkBZC,KAED,KAGC,SAAC,EAAAC,SAAD,UACOb,EAAUC,UAAY,SAACa,EAAA,EAAD,CAAWZ,aAAcF,EAAUE,gBACxD,iBAAKR,UAAWC,EAAhB,WACI,gBAAMD,UACFC,EADJ,UAGI,iDAEJ,gBAAKD,UAAWC,EAAhB,SACMK,EAAUA,UACRA,EAAUA,UAAUe,MAAM,EAAE1B,EAAM2B,OAAOC,KAAI,SAAAC,GACzC,OAAO,SAAC,GAAD,UAAkCA,GAAdA,EAAE5B,YAFb,SAAC6B,EAAA,EAAD,MAM3B9B,EAAM2B,MAAQ,GAAK,MAAO,SAAC,KAAD,CAAMI,GAAI,aAAV,wC,sDCpDhCC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6GAE6BC,MAAM,mEAAoE,CAC3FC,QAAS,CACL,eAAgB,oBAEpBC,YAAa,YANzB,cAEYlB,EAFZ,yBAQeA,GARf,+IAaemB,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6GAE6BH,MAAM,wEAAyE,CAChGC,QAAS,CACL,eAAgB,oBAEpBC,YAAa,YANzB,cAEYlB,EAFZ,yBAQeA,GARf,+IAcA,IAAMN,EAAY,CACdqB,oB,WA5BWA,OAAAA,EAAAA,MAAAA,KAAAA,YA6BXI,yBA7BJ,WAaeA,OAAAA,EAAAA,MAAAA,KAAAA,aAkBf","sources":["webpack://formula1/./src/components/home/standings/driversStandings.module.css?6b80","webpack://formula1/./src/components/common/driverPoints/driverPoints.module.css?30f8","components/common/driverPoints/DriverPoints.js","components/home/standings/DriversStandings.js","utils/api/heroku_api/hStandings.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main-container\":\"driversStandings_main-container__TeOwh\",\"heading-container\":\"driversStandings_heading-container__9+Wi9\",\"standings-container\":\"driversStandings_standings-container__FMENE\"};","// extracted by mini-css-extract-plugin\nexport default {\"driver-row\":\"driverPoints_driver-row__Ln9jD\"};","import React from 'react'\r\nimport styles from './driverPoints.module.css'\r\nfunction DriverPoints(props) {\r\n    const driver = props.driver.split(' ')\r\n    const firstName = driver[0]\r\n    const lastName = driver[1]\r\n    return (\r\n        <div className={styles['driver-row']}>\r\n            <p>{props.position}</p>\r\n            <p>{firstName}</p>\r\n            <p>{lastName}</p>\r\n            <p>{props.team}</p>\r\n            <p>{props.points}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DriverPoints","import React, {useEffect, useState, Fragment} from 'react'\r\nimport styles from './driversStandings.module.css'\r\nimport hStandings from '../../../utils/api/heroku_api/hStandings'\r\nimport ErrorComp from '../../common/errorComp/ErrorComp'\r\nimport {Link} from 'react-router-dom'\r\nimport DriversPoints from '../../common/driverPoints/DriverPoints'\r\nimport Spinner from '../../common/spinner/Spinner'\r\n\r\n\r\nfunction DriversStandings(props) {\r\n    const [standings, setStandings] = useState({\r\n        standings: null,\r\n        hasError: null,\r\n        errorMessage: null\r\n    })\r\n\r\n    useEffect(() => {\r\n        async function FetchStandings() {\r\n            try{\r\n                let response = await hStandings.getDriversStandings()\r\n                if (!response.ok) {\r\n                    throw new Error('Bad request to Standings')\r\n                }\r\n                let json = await response.json()\r\n                if (json.error) {\r\n                    throw new Error(json.error.message)\r\n                }\r\n                setStandings({standings: json, hasError: null, errorMessage: null})\r\n                return json\r\n            }catch(err) {\r\n                setStandings({standings: null, hasError: true, errorMessage: err.message})\r\n                return err\r\n            }\r\n        }\r\n        FetchStandings()\r\n        \r\n    }, [])\r\n\r\n    return (\r\n        <Fragment>\r\n             {(standings.hasError) ? <ErrorComp errorMessage={standings.errorMessage}/> : \r\n                <div className={styles['main-container']}>\r\n                    < div className = {\r\n                        styles['heading-container']\r\n                    } >\r\n                        <h2>DRIVERS STANDINGS</h2>\r\n                    </div>\r\n                    <div className={styles['standings-container']}>\r\n                        {!standings.standings ? <Spinner/> : \r\n                            standings.standings.slice(0,props.count).map(x => {\r\n                                return <DriversPoints key={x.driver} {...x}/>\r\n                            })\r\n                        }\r\n                    </div>\r\n                    {props.count > 20 ? null : <Link to={'/standings'}>VIEW FULL STANDINGS</Link>}\r\n                </div>\r\n             }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default DriversStandings","\r\n\r\nasync function getDriversStandings() {\r\n    try {\r\n        let response = await fetch('https://boiling-brushlands-51072.herokuapp.com/standings/drivers', {\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            credentials: 'include'\r\n        })\r\n        return response;\r\n    } catch(err) {\r\n        return err\r\n    }\r\n}\r\nasync function getConstructorsStandings() {\r\n    try {\r\n        let response = await fetch('https://boiling-brushlands-51072.herokuapp.com/standings/constructors', {\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            credentials: 'include'\r\n        })\r\n        return response;\r\n    } catch (err) {\r\n        return err\r\n    }\r\n}\r\n\r\nconst standings = {\r\n    getDriversStandings,\r\n    getConstructorsStandings\r\n}\r\nexport default standings"],"names":["props","driver","split","firstName","lastName","className","styles","position","team","points","useState","standings","hasError","errorMessage","setStandings","useEffect","hStandings","response","ok","Error","json","error","message","FetchStandings","Fragment","ErrorComp","slice","count","map","x","Spinner","to","getDriversStandings","fetch","headers","credentials","getConstructorsStandings"],"sourceRoot":""}