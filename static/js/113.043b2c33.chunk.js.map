{"version":3,"file":"static/js/113.043b2c33.chunk.js","mappings":"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","sources":["webpack://formula1/./src/components/common/nameHeader/nameHeader.module.css?2008","components/common/nameHeader/NameHeader.js","webpack://formula1/./src/components/driverPage/driverPageLayout/driversPageLayout.module.css?a7ea","components/driverPage/driverPageLayout/DriverPageLayout.js","webpack://formula1/./src/components/teamPage/tableRow/tableRow.module.css?b6e3","components/teamPage/tableRow/TableRow.js","webpack://formula1/./src/components/teamPage/contentTable/table.module.css?bfcc","components/teamPage/contentTable/Table.js","webpack://formula1/./src/components/teamPage/driverCard/driverCard.module.css?91cc","components/teamPage/driverCard/DriverCard.js","webpack://formula1/./src/components/teamPage/header/header.module.css?fa22","components/teamPage/header/Header.js","utils/api/heroku_api/hDrivers.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main-container\":\"nameHeader_main-container__IbbgN\"};","import React from 'react'\r\nimport styles from './nameHeader.module.css'\r\n\r\nfunction NameHeader({name}) {\r\n\r\n    return (\r\n        <div className={styles['main-container']}>\r\n            <h1>{name}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NameHeader","// extracted by mini-css-extract-plugin\nexport default {\"main-container\":\"driversPageLayout_main-container__rUeIv\",\"content-container\":\"driversPageLayout_content-container__YQoxT\",\"drivers-container\":\"driversPageLayout_drivers-container__gs73a\"};","import React, {useState, useEffect, Fragment} from 'react'\r\nimport {useParams} from 'react-router-dom'\r\nimport hDrivers from '../../../utils/api/heroku_api/hDrivers'\r\nimport ErrorComp from '../../common/errorComp/ErrorComp'\r\nimport Spinner from '../../common/spinner/Spinner'\r\nimport NameHeader from '../../common/nameHeader/NameHeader'\r\nimport styles from './driversPageLayout.module.css'\r\nimport Table from '../../teamPage/contentTable/Table'\r\nimport Header from '../../teamPage/header/Header'\r\nimport DriverCard from '../../teamPage/driverCard/DriverCard'\r\n\r\nfunction DriverPageLayout() {\r\n    const [state, setState] = useState({error: null, errorMessage: null, driver: null})\r\n    const {id} = useParams()\r\n\r\n    useEffect(() => {\r\n        async function FetchDriver() {\r\n            try {\r\n                const response = await hDrivers.getDriverById(id);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch driver!')\r\n                }\r\n                const json = await response.json()\r\n                setState({error: null, errorMessage: null, driver: json})\r\n            } catch(err) {\r\n                setState({error: true, errorMessage: err.message, driver: null})\r\n            }\r\n        }\r\n        FetchDriver()\r\n    }, [])\r\n    console.log(state)\r\n    return (\r\n        <Fragment>\r\n            {state.error ? <ErrorComp errorMessage={state.errorMessage}/> : null}\r\n            {state.error ? null : \r\n                (!state.driver) ? <Spinner/> : \r\n                <Fragment>\r\n                    <NameHeader name={`${state.driver.givenName} ${state.driver.familyName}`}/>\r\n                    <section className={styles['main-container']}> \r\n                        <div className={styles['content-container']}>\r\n                            <Header name={`${state.driver.givenName} ${state.driver.familyName}`} flag={state.driver.country.toLowerCase()}/>\r\n                            <Table {...state.driver}/>\r\n                        </div>\r\n                        <div className={styles['drivers-container']}>\r\n                            <DriverCard image={`${state.driver.givenName} ${state.driver.familyName}`}/>\r\n                        </div>\r\n                    </section>\r\n                </Fragment>\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default DriverPageLayout","// extracted by mini-css-extract-plugin\nexport default {\"row\":\"tableRow_row__6dYX1\",\"title\":\"tableRow_title__VkWon\",\"content\":\"tableRow_content__ZbAgn\"};","import React from 'react'\r\nimport styles from './tableRow.module.css'\r\n\r\nfunction TableRow(props) {\r\n\r\n\r\n    return (\r\n        <tr className={styles.row}>\r\n            <td className={styles.title}>{props.title}</td>\r\n            <td className={styles.content}>{props.content}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TableRow","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"table_table__RqKN2\"};","import React from 'react'\r\nimport TableRow from '../tableRow/TableRow'\r\nimport styles from './table.module.css'\r\n\r\nfunction Table(props) {\r\n    const blackList = ['_id', 'image', 'drivers', 'stats']\r\n    const data = Object.entries(props).filter(x => !blackList.includes(x[0]))\r\n    let stats = []\r\n    if (props.stats) {\r\n        stats = Object.entries(props.stats)\r\n    }\r\n    \r\n    return (\r\n        <table className={styles.table}>\r\n            <tbody>\r\n                {data.map((x,i )=> {\r\n                    console.log(x,i)\r\n                return <TableRow key={`${i}${x[0]}`} title={x[0]} content={x[1]}/>\r\n            })}\r\n                {!stats ? null : \r\n                    stats.map((x,i )=> {\r\n                return <TableRow key={`${i}${x[0]}`} title={x[0]} content={x[1]}/>\r\n            })\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Table","// extracted by mini-css-extract-plugin\nexport default {\"main-container\":\"driverCard_main-container__TRf4H\",\"image-container\":\"driverCard_image-container__Us9YH\",\"content\":\"driverCard_content__hZT06\",\"fade\":\"driverCard_fade__tRFCt\",\"driver\":\"driverCard_driver__3ps-g\",\"team\":\"driverCard_team__ZeM+t\"};","import React, {useEffect, useState} from 'react'\r\nimport styles from './driverCard.module.css'\r\nimport drivers from '../../../assets/images/drivers/driver-images'\r\nimport hDrivers from '../../../utils/api/heroku_api/hDrivers'\r\nimport ErrorComp from '../../common/errorComp/ErrorComp'\r\n\r\n\r\nfunction DriverCard(props) {\r\n    let familyName = props.image.split(' ')[1]\r\n    const [state,setState] = useState({error: null, errorMessage: null, driver: null})\r\n\r\n    useEffect(() => {\r\n        async function FetchDriver() {\r\n            try{\r\n                const response = await hDrivers.getDriverByName(familyName)\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch!')\r\n                }\r\n                const json = await response.json()\r\n                setState({error: null, errorMessage: null, driver: json})\r\n            } catch(err) {\r\n                setState({error: true, errorMessage: err.message, driver: null})\r\n            }\r\n        }\r\n        FetchDriver()\r\n    }, [])\r\n\r\n   \r\n    return (\r\n        \r\n        <div className={styles['main-container']}>\r\n            <div className={styles['image-container']}>\r\n                <img src={drivers[familyName.toLowerCase()]} alt='driver-image' loading='lazy'/>\r\n            </div>\r\n            {state.error ? <ErrorComp errorMessage={state.errorMessage}/> : null}\r\n            {!state.error ? (!state.driver ? \r\n            <div className={styles.content}>\r\n                 \r\n            </div>\r\n                    : \r\n                    <div className={styles.content}>\r\n                        <h1>{state.driver.permanentNumber}</h1>\r\n                        <p className={styles['driver']}>{`${state.driver.givenName} ${state.driver.familyName}`}</p>\r\n                        <p className={styles['team']}>{state.driver.team}</p>\r\n                    </div>\r\n            ) : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DriverCard","// extracted by mini-css-extract-plugin\nexport default {\"main-container\":\"header_main-container__QRd0k\",\"name\":\"header_name__QVkTa\",\"image-container\":\"header_image-container__jWxSf\",\"flag-container\":\"header_flag-container__k0K1r\"};","import React from 'react'\r\nimport carLogos from '../../../assets/images/car_logos/car_logos'\r\nimport flags from '../../../assets/images/flags/flag-images'\r\nimport styles from './header.module.css'\r\nfunction Header({image, name, flag}) {\r\n\r\n    return (\r\n        <div className={styles['main-container']}>\r\n            <h2 className={styles.name}>{name}</h2>\r\n            {image ? <div className={styles[\"image-container\"]}>\r\n                        <img src={carLogos[image]} alt='team-logo-image' loading='lazy'/>\r\n                     </div>  \r\n                     : null}\r\n            {flag ? <div className={styles[\"flag-container\"]}>\r\n                        <img src={flags[flag]} alt='flag-image' loading='lazy'/>\r\n                     </div>  \r\n                     : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","async function getDrivers() {\r\n    try {\r\n        const response = await fetch('https://boiling-brushlands-51072.herokuapp.com/drivers', {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            credentials: 'include'\r\n        })\r\n        return response\r\n    } catch(err) {\r\n        return err\r\n    }\r\n}\r\n\r\nasync function getDriverById(id) {\r\n    try {\r\n        const response = await fetch(`https://boiling-brushlands-51072.herokuapp.com/drivers/${id}`, {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            credentials: 'include'\r\n        })\r\n        return response\r\n    } catch (err) {\r\n        return err\r\n    }\r\n}\r\nasync function getDriverByName(name) {\r\n    try {\r\n        const response = await fetch(`https://boiling-brushlands-51072.herokuapp.com/drivers?name=${encodeURI(name)}`, {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            credentials: 'include'\r\n        })\r\n        return response\r\n    } catch (err) {\r\n        return err\r\n    }\r\n}\r\n\r\nconst api = {\r\n    getDriverById, getDrivers, getDriverByName\r\n}\r\n\r\nexport default api"],"names":["name","className","styles","useState","error","errorMessage","driver","state","setState","id","useParams","useEffect","hDrivers","response","ok","Error","json","message","FetchDriver","console","log","Fragment","ErrorComp","NameHeader","givenName","familyName","Header","flag","country","toLowerCase","Table","DriverCard","image","Spinner","props","title","content","blackList","data","Object","entries","filter","x","includes","stats","map","i","split","src","drivers","alt","loading","permanentNumber","team","carLogos","flags","getDrivers","fetch","headers","credentials","getDriverById","getDriverByName","encodeURI","api"],"sourceRoot":""}